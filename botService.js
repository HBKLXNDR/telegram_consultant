// botService.js
const TelegramBot = require('node-telegram-bot-api');
const CONFIG = require('./config');
const logger = require('./logger');

class TelegramBotService {
    constructor(token, webAppUrl) {
        this.bot = new TelegramBot(token, { polling: true });
        this.webAppUrl = webAppUrl;
        this.initializeBot();
    }

    async initializeBot() {
        try {
            // Set bot commands
            await this.bot.setMyCommands(CONFIG.BOT_COMMANDS);
            this.initializeEventHandlers();
            logger.info('Bot initialized successfully');
        } catch (error) {
            logger.error('Error initializing bot:', error);
        }
    }

    initializeEventHandlers() {
        this.bot.on('message', this.handleMessage.bind(this));
        this.bot.onText(/\/help/, this.handleHelpCommand.bind(this));
        this.bot.onText(/\/services/, this.handleServicesCommand.bind(this));
        this.bot.onText(/\/prices/, this.handlePricesCommand.bind(this));
        this.bot.onText(/\/portfolio/, this.handlePortfolioCommand.bind(this));
        this.bot.onText(/\/contact/, this.handleContactCommand.bind(this));
        this.bot.onText(/\/form/, this.handleFormCommand.bind(this));
        this.bot.onText(/\/shop/, this.handleShopCommand.bind(this));
    }

    async handleMessage(msg) {
        const chatId = msg.chat.id;
        const text = msg.text;

        if (text === '/start') {
            await this.sendStartMessage(chatId);
        }

        if (msg?.web_app_data?.data) {
            await this.handleWebAppData(msg);
        }
    }

    async handleHelpCommand(msg) {
        const chatId = msg.chat.id;
        const commandsList = CONFIG.BOT_COMMANDS
            .map(cmd => `/${cmd.command} - ${cmd.description}`)
            .join('\n');

        try {
            await this.bot.sendMessage(chatId,
                `–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n${commandsList}\n\n–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.`
            );
        } catch (error) {
            logger.error('Error sending help message:', { error, chatId });
        }
    }

    async handleServicesCommand(msg) {
        const chatId = msg.chat.id;
        const servicesList = CONFIG.SERVICES
            .map(service => `*${service.name}*\n${service.description}\n–¶—ñ–Ω–∞: ${service.price}`)
            .join('\n\n');

        try {
            await this.bot.sendMessage(chatId,
                `–ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏:\n\n${servicesList}`,
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            logger.error('Error sending services message:', { error, chatId });
        }
    }

    async handlePricesCommand(msg) {
        const chatId = msg.chat.id;
        const priceList = CONFIG.SERVICES
            .map(service => `${service.name}: ${service.price}`)
            .join('\n');

        try {
            await this.bot.sendMessage(chatId,
                `–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:\n\n${priceList}\n\n–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.`
            );
        } catch (error) {
            logger.error('Error sending prices message:', { error, chatId });
        }
    }

    async handlePortfolioCommand(msg) {
        const chatId = msg.chat.id;
        try {
            await this.bot.sendMessage(chatId,
                `–ù–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞ —Å–∞–π—Ç—ñ: ${CONFIG.HOMEPAGE_URL}/portfolio\n\n–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ñ: @our_portfolio`
            );
        } catch (error) {
            logger.error('Error sending portfolio message:', { error, chatId });
        }
    }

    async handleContactCommand(msg) {
        const chatId = msg.chat.id;
        try {
            await this.bot.sendMessage(chatId,
                '–ó–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏:\n\n' +
                'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +380123456789\n' +
                'üìß Email: contact@example.com\n' +
                'üåê –°–∞–π—Ç: ' + CONFIG.HOMEPAGE_URL + '\n' +
                'üì± Telegram: @support_manager',
                {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: 'üìû –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏', url: 'tel:+380123456789' },
                            { text: 'üìß –ù–∞–ø–∏—Å–∞—Ç–∏', url: 'mailto:contact@example.com' }
                        ]]
                    }
                }
            );
        } catch (error) {
            logger.error('Error sending contact message:', { error, chatId });
        }
    }

    async handleFormCommand(msg) {
        const chatId = msg.chat.id;
        try {
            await this.bot.sendMessage(chatId, '–©–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:', {
                reply_markup: {
                    keyboard: [[
                        { text: '–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É', web_app: { url: `${this.webAppUrl}/form` } }
                    ]],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            });
        } catch (error) {
            logger.error('Error sending form message:', { error, chatId });
        }
    }

    async handleShopCommand(msg) {
        const chatId = msg.chat.id;
        try {
            await this.bot.sendMessage(chatId, '–©–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:', {
                reply_markup: {
                    keyboard: [[
                        { text: '–ó–∞–º–æ–≤–∏—Ç–∏ —Å–∞–π—Ç', web_app: { url: this.webAppUrl } }
                    ]],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            });
        } catch (error) {
            logger.error('Error sending shop message:', { error, chatId });
        }
    }

    async sendStartMessage(chatId) {
        try {
            await this.bot.sendMessage(chatId,
                '–í—ñ—Ç–∞—î–º–æ! üëã\n\n' +
                '–ú–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ –≤–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É—á–∞—Å–Ω–∏–π –≤–µ–±-—Å–∞–π—Ç –¥–ª—è –≤–∞—à–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É. ' +
                '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó.\n\n' +
                '–©–æ –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –∑—Ä–æ–±–∏—Ç–∏?',
                {
                    reply_markup: {
                        keyboard: [
                            [
                                { text: '–ó–∞–º–æ–≤–∏—Ç–∏ —Å–∞–π—Ç', web_app: { url: this.webAppUrl } },
                                { text: '–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É', web_app: { url: `${this.webAppUrl}/form` } }
                            ],
                            [
                                { text: 'üìã –ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏', callback_data: '/services' },
                                { text: 'üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç', callback_data: '/prices' }
                            ],
                            [
                                { text: 'üìû –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏', callback_data: '/contact' }
                            ]
                        ],
                        resize_keyboard: true
                    }
                }
            );
        } catch (error) {
            logger.error('Error sending start message', {
                error,
                chatId,
                code: error.code,
                description: error.response?.body
            });
        }
    }

    async handleWebAppData(msg) {
        const chatId = msg.chat.id;
        try {
            const data = JSON.parse(msg?.web_app_data?.data);
            logger.info(`Received data from chatId ${chatId}:`, data);

            await this.sendFeedbackMessage(chatId);
            await this.sendLeadNotification(data);
            await this.sendFollowUpMessage(chatId);
        } catch (error) {
            logger.error('Error handling web app data', { error, chatId });
        }
    }

    async sendFeedbackMessage(chatId) {
        try {
            await this.bot.sendMessage(chatId,
                `–î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É! üéâ\n` +
                `–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.`
            );
        } catch (error) {
            logger.error('Error sending feedback message', { error, chatId });
        }
    }

    async sendLeadNotification(data) {
        try {
            const message =
                `üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!\n\n` +
                `üë§ –Ü–º'—è: ${data.name}\n` +
                `üìß Email: ${data.email}\n` +
                `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.number}\n` +
                `üïí –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}`;

            await this.bot.sendMessage(CONFIG.TG_ID, message);
        } catch (error) {
            logger.error('Error sending lead notification', { error, data });
        }
    }

    async sendFollowUpMessage(chatId) {
        try {
            await this.delay(3000);
            await this.bot.sendMessage(chatId,
                `üì¢ –í—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —É —Ü—å–æ–º—É —á–∞—Ç—ñ: ${CONFIG.TG_USERNAME}\n\n` +
                `‚è≥ –ü–æ–∫–∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–π–º–∞—î—Ç—å—Å—è –æ–±—Ä–æ–±–∫–æ—é –í–∞—à–æ—ó –∑–∞—è–≤–∫–∏, ` +
                `–∑–∞–≤—ñ—Ç–∞–π—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç! ${CONFIG.HOMEPAGE_URL}\n\n` +
                `üí° –¢–∞–º –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ.`
            );
        } catch (error) {
            logger.error('Error sending follow-up message', { error, chatId });
        }
    }

    async handleWebAppQuery(queryId, products, totalPrice) {
        try {
            await this.bot.answerWebAppQuery(queryId, {
                type: 'article',
                id: queryId,
                title: '–£—Å–ø—ñ—à–Ω–∞ –∫—É–ø—ñ–≤–ª—è',
                input_message_content: {
                    message_text:
                        `üéâ –í—ñ—Ç–∞—î–º–æ –∑—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è–º!\n\n` +
                        `üí∞ –°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${totalPrice}\n` +
                        `üì¶ –û–±—Ä–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏:\n${products.map(item => `- ${item.title}`).join('\n')}`
                }
            });
            return true;
        } catch (error) {
            logger.error('Error handling web app query', { error, queryId, products, totalPrice });
            throw error;
        }
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

module.exports = TelegramBotService;